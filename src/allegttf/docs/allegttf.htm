<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="DougEleveld">
   <meta name="GENERATOR" content="Mozilla/4.6 [en] (Win95; I) [Netscape]">
   <meta name="Description" content="The ALLEGTTF homepage and docs">
   <meta name="KeyWords" content="djgpp, Allegro, true type, font, Eleveld">
   <title>The ALLEGTTF homepage</title>
</head>
<body>

<center><font size=+3>ALLEGTTF</font>
<br><font size=-1>Anti-aliased text output and font loading routines for
Allegro</font>
<br><font size=-1>Version 2.0</font>
<br><font size=-1>By Doug Eleveld</font>
<br><font size=-1>D.J.Eleveld@anest.azg.nl</font>
<br><font size=-1>deleveld@dds.nl</font>
<br><font size=-1>TTF font loading code from the Freetype Project.</font>
<br><font size=-1>(see /source/freetype/licence.txt)</font></center>

<p><font size=-1>#include &lt;std.disclaimer.h></font>
<br><font size=-1>"I do not accept responsibility for any effects, adverse
or otherwise, that this code may have on you, your computer, your sanity,
your dog, and anything else that you can think of.&nbsp; Use it at your
own risk."</font>
<p><font size=+2>What is ALLEGTTF</font>
<br><font size=-1>ALLEGTTF is a collection of functions to produce anti-aliased
text output and TTF (True Type Font) loader, a GRX font loader and a bitmap
font loader for use with <a href="http://www.talula.demon.co.uk/allegro/">Allegro</a>.&nbsp;&nbsp;
Antialiased text means that fonts have 'soft' edges and blend into their
backgrounds smoothly.&nbsp; Antialiased fonts are useful because the look
a lot better than non-antialiased fonts, expecially at low resolutions.</font>
<p><font size=-1>One day I saw some code that Domenic Cooney had put on
his web page to draw antialiased text. He used transparant pixels to draw
the antialiasing and I really liked what I saw.&nbsp; I took his code and
made some optimizations and re-wrote a lot of it.&nbsp; Now it's a quite
a bit faster in most graphic modes, especially when drawing a filled background
(i.e. Allegro's text_mode >= 0).&nbsp; It's quite a bit bigger too because
there are now more than a few pretty well optimized routnes, which are
called depending on the graphic mode colour depth and the text_mode.</font>
<p><font size=-1>I also found the <a href="http://www.freetype.org">Freetype
Project</a> on the net which is simple ansi C code for loading True Type
Font files into memory.&nbsp; I simply added some routines to get Freetype
and Allegro working well together.&nbsp; I DID NOT write any of the files
in the /source/freetype directory.&nbsp; These files came from the Freetype
Project.</font>
<p><font size=-1>ALLEGTTF draws text in 8 bit graphic modes with 6 different
antialiasing levels.&nbsp; This is also true&nbsp; when Allegro's text_mode
is >=0 in any graphic mode.&nbsp; When in a 15,16,24 or 32 bit graphic
mode and with text_mode is &lt;0, then the text is drawn with 255 levels
of antialiasing.</font>
<p><font size=-1>ALLEGTTF is not very useful without Allegro since it relies
on many of Allegro's procedures.&nbsp; The latest version of Allegro can
always be found on ftp://x2ftp.oulu.fi, in&nbsp; /pub/msdos/programmer/djgpp2/,
and on the Allegro homepage,&nbsp; http://www.talula.demon.co.uk/allegro/.</font>
<p><font size=-1>The latest version of ALLEGTTF is always available at:
http://huizen.dds.nl/~deleveld/index.htm&nbsp; It might or might not also
be available at ftp://x2ftp.oulu.fi, in&nbsp; /pub/msdos/programmer/djgpp2/</font>
<p><font size=+3>Copyright</font>
<br><font size=-1>ALLEGTTF consists of two parts.&nbsp; One in the code
that I wrote for fast text antialiasing (partially taken from Allegro source)
and the other part is the Freetype Project which is used for loading TTF
fonts.&nbsp; Both sets of code have different restrictions.&nbsp; Any use
of ALLEGTTF must meet both requirements.</font>
<p><font size=-1>For information on the restrictions on the Freetype project
code, see the file /source/freetype.licence.txt. Basically it says that
you cannot pretend that you wrote this software yourself and must give
links to the Freetype Project homepage.&nbsp; See the file /source/freetype/licence.txt
for the complete formal restrictions.</font>
<p><font size=-1>The source code that I wrote for ALLEGTTF is swap-ware.
You may use, modify, redistribute, and generally hack it about in any way
you like, but if you do you must send me something in exchange. This could
be a complimentary copy of a game, an addition or improvement to ALLEGTTF,
a bug report, some money (this is particularly encouraged if you use ALLEGTTF
in a commercial product), or just a copy of your autoexec.bat if you don't
have anything better. If you redistribute parts of ALLEGTTF or make a game
using it, it would be nice if you mentioned me somewhere in the credits,
but if you just want to pinch a few routines that is OK too. I'll trust
you not to rip me off.</font>
<p><font size=-1>Since this whole library was inspired by the work of Domenic
Cooney, I guess that the above copyright also applies to him.&nbsp; So
if you send me anything, send it to Domenic also.</font>
<p><font size=-1>Of course you must also read Allegro's copyright too,
I guess.</font>
<p><font size=+3>Download</font>
<br><font size=-1>You can download&nbsp;<a href="http://www.oprit.rug.nl/eleveld/allegttf.zip">
ALLEGTTF 2.0 for DOS/Windows</a> or&nbsp;<a href="http://www.oprit.rug.nl/eleveld/allegttf.tgz">
ALLEGTTF 2.0 for Linux</a>.&nbsp; These are versions for the Allegro WIPs
later than 3.9.36.</font>
<br><font size=-1>Older WIPS can use <a href="http://www.oprit.rug.nl/eleveld/alttf19.zip">ALLEGTTF
1.9</a>.</font>
<br><font size=-1>If you are using Allegro 3.12, then you can use&nbsp;<a href="http://www.oprit.rug.nl/eleveld/alttf16.zip">
ALLEGTTF 1.6</a>.</font>
<p><font size=+3>Using ALLEGTTF</font>
<br><font size=-1>You have to make your own antialiased fonts this is possible
in two ways.</font>
<p><font size=-1>1) Use the TTF2PCX program in the examples directory.</font>
<p><font size=-1>2) Use the TTF2PCX program which is available from the
Allegro homepage.&nbsp; Be sure to use the maximim allowed antialiasing
levels. (0-254, I think)</font>
<p><font size=-1>Since ALLEGTTF is only useful with Allegro, I will assume
that you know something about compiling, linking, object files, library
files etc.</font>
<p><font size=-1>The best way to use ALLEGTTF is to use libalttf.a as a
library and use it during your linking process.&nbsp; You can the load
TTF fonts, and draw them to the screen and BITMAP structures.</font>
<p><font size=-1>If you want maximum speed, make sure that you make an
RGB table with Allegro so that ALLEGTTF and use fast table lookup in 8
bit modes instead of having to search the palette to find the proper antialiasing
colours.&nbsp; The Allegro docs show how to do this, or you can look at
the ALLEGTTF examples which do this also.</font>
<p><font size=+3>Initialization functions</font>
<br><tt><font size=-1>void antialias_init(PALETTE pal)</font></tt>
<br><font size=-1>This function should be called before using any of the
functions in the ALLEGTTF library, however you could skip it and have the
first call to the text drawing function initialise itself.&nbsp; Pass it
the palette to use when in 8 bit colour depth, otherwise NULL.&nbsp; Passing
a NULL when using 8 bit color mode will make the palette be calculated
only when it's needed.&nbsp; It is only needed in 8 bit video modes when
plotting text with an empty background.&nbsp; In 15,16,24,or 32 bit modes
I suggest passing NULL.</font>
<p><tt><font size=-1>void antialias_palette(PALETTE pal)</font></tt>
<br><font size=-1>Pass it the palette to use when in 8 bit colour depth.&nbsp;
Passing a NULL will free any internal colormaps and the colormaps will
only be recalculated only when it's needed.&nbsp; It is only needed in
8 bit video modes when plotting text with an empty background.</font>
<p><tt><font size=-1>void antialias_exit(void)</font></tt>
<br><font size=-1>This function cleans up after the antialiased functions,
releasing any internal memory that was used.&nbsp; You don't really have
to call this function because it will be done automatically at program
exit.</font>
<p><font size=+3>Text output functions</font>
<br><font size=-1>For Allegro versions higher that 3.0 + WIP, the user
can create a FONT using ALLEGTTF and then call the normal Allegro textout
functions and the text will be properly drawn antialised.&nbsp; There is
no need for specialized text drawing functions.&nbsp; However you can call
the antialiased text output functions directly.&nbsp; They are:</font>
<p><tt><font size=-1>void aatextout(BITMAP *bmp, const FONT *font, const
char *string, int x, int y, int colour)</font></tt>
<br><tt><font size=-1>void aatextout_center(BITMAP *bmp, const FONT *font,
const char *string, int x, int y, int colour)</font></tt>
<br><tt><font size=-1>void aatextout_right(BITMAP *bmp, const FONT *font,
const char *string, int x, int y, int colour)</font></tt>
<br><tt><font size=-1>void aatextprintf(BITMAP *bmp, const FONT *f, int
x, int y, int color, const char *format, ...)</font></tt>
<br><tt><font size=-1>void aatextprintf_center(BITMAP *bmp, const FONT
*f, int x, int y, int color, const char *format, ...)</font></tt>
<br><tt><font size=-1>void aatextprintf_right(BITMAP *bmp, const FONT *f,
int x, int y, int color, const char *format, ...)</font></tt>
<br><font size=-1>The function <tt>aatextout</tt> plots antialiased text
on the screen just like Allegro's <tt>textout</tt> function.&nbsp; It is
a little slower than the Allegro version, so it should only be used with
smoothed fonts.&nbsp; To check out how much slower the antialiased text
output is on your machine, run the profile program in the examples directory.&nbsp;
Normally the antialiased text drawing is 2 to 8 times slower that Allegro's
normal textout.&nbsp; You can use the profile program in the eaxmples directory
to find out exactly how fast the text drawing is you computer.</font>
<p><font size=+3>Bitmap font loading functions</font>
<br><tt><font size=-1>FONT* load_font (const char* filename)</font></tt>
<br><font size=-1>This function loads an Allegro FONT structure from a
file and return a pointer to it.&nbsp; Note that the color conversion mode
must be set to COLORCONV_NONE.&nbsp; Don't forget to call the Allegro procedure
destroy_font(FONT*) in order to release the memory associated with the
font.&nbsp; The code for this function comes almost completely from Allegro's
grabber utility.&nbsp; It is also in a seperate object file in the libalttf.a
library so unless you use this function, it won't be included in your final
executable.</font>
<p><font size=+3>True Type font loading functions</font>
<br><tt><font size=-1>FONT* load_ttf_font (const char* filename, const
int points, const int smooth)</font></tt>
<br><font size=-1>This function loads a True Type font (*.TTF) as an Allegro
FONT struct.&nbsp; The points variable tells how large the loaded font
should be.&nbsp; The smooth tells what kind of font smoothing should be
used when loading.&nbsp; See the Font Smoothing Defines section for details.</font>
<p><tt><font size=-1>FONT* load_ttf_font_ex (const char* filename, const
int points_w, const int points_h, const int smooth)</font></tt>
<br><font size=-1>This function loads a True Type font (*.TTF) as an Allegro
FONT struct.&nbsp; The points_w and points_h tell how wide and how tall
the font should be loaded.&nbsp; This allows you to load very tall or very
wide fonts.&nbsp; Loading Unicode values can be helpful for loading fonts
that contain mostly graphic characters.&nbsp; The smooth tells what kind
of font smoothing should be used when loading.&nbsp; See the Font Smoothing
Defines section for details.</font>
<p><tt><font size=-1>FONT* load_ttf_font_ex2 (const char* filename, const
int points_w, const int points_h, const int begin, const int end, const
int smooth)</font></tt>
<br><font size=-1>This function loads a True Type font (*.TTF) as an Allegro
FONT struct.&nbsp; The points_w and points_h tell how wide and how tall
the font should be loaded.&nbsp; This allows you to load very tall or very
wide fonts.&nbsp; The begin and end variables determine which characters
are put into the font.&nbsp; This function might or might not also support
the Unicode character sets, but as I know almost nothing about Unicode,
so I couldn't tell you.&nbsp; If you want a normal Allegro font, use 32
and 128 for these values.&nbsp; The smooth tells what kind of font smoothing
should be used when loading.&nbsp; See the Font Smoothing Defines section
for details.</font>
<p><tt><font size=-1>FONT* load_ttf_font_mem (const char* filename, const
int points, const int smooth)</font></tt>
<br><tt><font size=-1>FONT* load_ttf_font_ex_mem (const char* filename,
const int points_w, const int points_h, const int smooth)</font></tt>
<br><tt><font size=-1>FONT* load_ttf_font_ex2_mem (const char* filename,
const int points_w, const int points_h, const int begin, const int end,
const int smooth)</font></tt>
<br><font size=-1>These functions are just like the above functions except
they convert the TTF font to the Allegro format via a system call to TTF2PCX.EXE.&nbsp;
This saves you from having the Freetype code in memory, so your executables
are about 50K smaller.&nbsp; The disadvantage is that it does require TTF2PCX.EXE
to be in the path.</font>
<p><font size=+3>Font smoothing defines</font>
<br><font size=-1>These defines are used but the TTF loading functions
to determine what kind of font smoothing will be done on the loaded TTF
font.</font>
<p><font size=-1>ALLEGTTF_NOSMOOTH</font>
<br><font size=-1>Loads the font with no font smoothing</font>
<br><font size=-1>ALLEGTTF_TTFSMOOTH</font>
<br><font size=-1>Loads the font with font smoothing done by the TTF font
loading code.&nbsp; This can look a little wierd for small font sizes.</font>
<br><font size=-1>ALLEGTTF_REALSMOOTH</font>
<br><font size=-1>Loads the font with real font smoothing done by the ALLEGTTF
library.&nbsp; This looks OK at small font sizes, but can take a long time
to load for large fonts.</font>
<p><font size=+3>Bugs</font>
<br><font size=-1>The aatextout and the aatextout_center functions will
not handle properly individual characters larger that 128x128 pixels, as
this is the size of the internal scratchpad for aliasing the characters.&nbsp;
It would be easy to change the source to accept larger characters at the
expense of a little more memory and (possibly) slower output.&nbsp; If
you are drawing characters as big as that you probably don't have to antialias
them since they should be smooth enough already.</font>
<p><font size=-1>I know almost nothing about unicode so I can't really
promise that unicode characters will be handled properly.</font>
<p><font size=+3>Future Work</font>
<br><font size=-1>Do you have any suggestions about what to add to ALLEGTTF?
Just e-mail me.</font>
<p><font size=+3>In Conclusion</font>
<br><font size=-1>Why is ALLEGTTF free?&nbsp; Why are the sources freely
available?&nbsp; Because I want ALLEGTTF to be the best anti-aliased text
library that there is.&nbsp; When you release your source code and give
away your program for free people will use your program and look at your
source code.&nbsp; When they find bugs and mistakes they'll tell you and
sometimes even fix the bugs themselves.&nbsp; They couldn't do that without
your source.&nbsp; The end result is that everybodys software gets better
and better.</font>
<p><font size=+3>Thanks</font>
<br><font size=-1>I would like to thank a number of people for making ALLEGTTF
possible:</font>
<ul>
<li>
<font size=-1>D. J. Delorie and all the people connected with DJGPP for
making such a powerful tool available for DOS users.&nbsp; It runs in 32
bit protected mode, has got tons of virtual memory and mind boggling optimization.&nbsp;
It's amazingly powerful and yet free.</font></li>

<li>
<font size=-1>Robert Hohne and everyone connected with the extremely useful
RHIDE, an IDE for DJGPP that has the look and feel of the Borland C++ 3.1
IDE.&nbsp; One of the best IDE's I have ever used, and yet free.</font></li>

<li>
<font size=-1>Shawn Hargreaves and everyone connected with Allegro, the
amazing graphics, sound and hardware programming library for DJGPP.&nbsp;
Fast, complete, easy to use, and yet free.</font></li>

<li>
<font size=-1>The Freetype Project for producing freely available True
Type font loading code.</font></li>

<li>
<font size=-1>Domenic Cooney for producing the original code and the great
idea of producing the antialiasing by plotting pixels of different transparancies.</font></li>

<li>
<font size=-1>Tom Burgess for letting me freely use his pentium timer macros
for the text output profiler.</font></li>

<li>
<font size=-1>Dan Bogdanov for helping port ALLEGTTF for Linux and Windows.</font></li>

<li>
<font size=-1>Eric Botcazou for patching 1.9 to work with the Allegro WIPs.</font></li>

<li>
<font size=-1>Everyone who sent in bug reports and especially those who
also submitted code fixes.</font></li>

<li>
<font size=-1>Everyone at comp.os.msdos.djgpp for being patient and helpful.&nbsp;
It's too bad that the other newsgroups aren't useful and as friendly as
this one.</font></li>
</ul>
<font size=-1>Doug Eleveld</font>
<br><font size=-1>Herepoortenmolendrift 14</font>
<br><font size=-1>9711 DG, Groningen</font>
<br><font size=-1>The Netherlands</font>
<p><font size=-1>D.J.Eleveld@anest.azg.nl</font>
<br><font size=-1>deleveld@dds.nl</font>
<p><font size=-1><a href="http://huizen.dds.nl/~deleveld/index.htm">Back
to Doug's homepage</a></font>
</body>
</html>
